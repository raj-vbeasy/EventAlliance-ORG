import { Injectable } from "@angular/core";
import { Headers, Http, RequestOptions, Response } from "@angular/http";
import { User } from "../_models/index";
import { environment } from "../../../environments/environment";
import { Observable } from "rxjs";

@Injectable()
export class UserService {
    constructor(private http: Http) {
    }

    verify():Observable<boolean> {
        //TODO: Call API to verify user token. Token will be passed as HTTP Authorization Header.
        //Check Authorization header in CakePHP
        //return this.http.get('/api/verify', this.jwt()).map((response: Response) => response.json());
        return Observable.create((observer) => {
            setTimeout(() => {
                observer.next(true);
                observer.complete(true);
            }, 1000);
        });
    }

    forgotPassword(email: string) {
        return this.http.post('/api/forgot-password', JSON.stringify({ email }), this.jwt()).map((response: Response) => response.json());
    }

    getAll() {
        return this.http.get('/api/users', this.jwt()).map((response: Response) => response.json());
    }

    getById(id: number) {
        return this.http.get('/api/users/' + id, this.jwt()).map((response: Response) => response.json());
    }

    create(user: User) {
        return this.http.post('/api/users', user, this.jwt()).map((response: Response) => response.json());
    }

    update(user: User) {
        return this.http.put('/api/users/' + user.id, user, this.jwt()).map((response: Response) => response.json());
    }

    delete(id: number) {
        return this.http.delete('/api/users/' + id, this.jwt()).map((response: Response) => response.json());
    }

    // private helper methods

    private jwt() {
        // create authorization header with jwt token
        let currentUser = JSON.parse(localStorage.getItem('currentUser'));
        if (currentUser && currentUser.token) {
            let headers = new Headers({ 'Authorization': 'Bearer ' + currentUser.token });
            return new RequestOptions({ headers: headers });
        }
    }
}